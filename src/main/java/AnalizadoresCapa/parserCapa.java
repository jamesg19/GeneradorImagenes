
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AnalizadoresCapa;

import Analizadores.LexerCup;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import java.util.ArrayList;
import DatosEntrada.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserCapa extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return parserCapaSym.class;
}

  /** Default constructor. */
  @Deprecated
  public parserCapa() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserCapa(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserCapa(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\006" +
    "\000\002\005\004\000\002\005\003\000\002\012\010\000" +
    "\002\011\003\000\002\006\004\000\002\006\003\000\002" +
    "\007\006\000\002\007\005\000\002\010\005\000\002\010" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\006\010\007\011\010\001\002\000\004\004" +
    "\026\001\002\000\004\002\uffff\001\002\000\004\002\025" +
    "\001\002\000\004\013\016\001\002\000\004\004\ufff8\001" +
    "\002\000\004\002\000\001\002\000\006\002\ufff6\010\007" +
    "\001\002\000\006\002\ufffd\011\010\001\002\000\004\002" +
    "\ufffe\001\002\000\004\002\ufff7\001\002\000\006\007\021" +
    "\011\020\001\002\000\004\007\024\001\002\000\006\006" +
    "\022\007\ufff2\001\002\000\006\002\ufff4\010\ufff4\001\002" +
    "\000\004\011\020\001\002\000\004\007\ufff3\001\002\000" +
    "\006\002\ufff5\010\ufff5\001\002\000\004\002\001\001\002" +
    "\000\004\011\030\001\002\000\004\005\040\001\002\000" +
    "\004\006\033\001\002\000\006\005\ufffa\011\030\001\002" +
    "\000\004\005\ufffb\001\002\000\004\011\034\001\002\000" +
    "\004\006\035\001\002\000\004\012\036\001\002\000\004" +
    "\007\037\001\002\000\006\005\ufff9\011\ufff9\001\002\000" +
    "\006\002\ufffc\011\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\016\002\005\003\010\004\012\006\004\007" +
    "\011\011\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\014\007\011\001\001\000\010" +
    "\003\013\004\012\011\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\026\012\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\031\012\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserCapa$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserCapa$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserCapa$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


	
	private Symbol symC;
    
    ListaImagenCD lstImagen= new ListaImagenCD();
	ListaImagenCD arrayObjetos[]=new ListaImagenCD[300];
    ListaCapaCD lstCapa= new ListaCapaCD();
	ListaCapaCD arrayObjetosC[]=new ListaCapaCD[300];
    //CapaCD objCapa= new CapaDC();
    int ContIMG=-1;
    int ContCAP=-1;
    public Symbol getS(){
        return this.symC;
    }
	public parserCapa( LexerCup lex){
	 super(lex);
	}
	public void report_error(String message, Object info){ 
		System.out.println("\nREPORT ERROR");
	}
	public void report_fatal_error(String message, Object info){
		System.out.println("\nREPORT FATAL");
	}
	
	public void syntax_error(Symbol cur_token) {

	System.out.println("...SE ESPERABA: "+symbl_name_from_id(expected_token_ids().get(0)));
        System.out.println("syntaxerr: " + symbl_name_from_id(cur_token.sym) +" Columna: "+cur_token.right+" Linea: "+cur_token.left+" Valor:"+cur_token.value);
    }
	protected int error_sync_size() {
        return 1;
    }
    public ListaImagenCD getLstImagen() {
        return lstImagen;
    }
    public ListaImagenCD[] getArrayImagen() {
        return arrayObjetos;
    }
    public ListaCapaCD[] getArrayCapa() {
        return arrayObjetosC;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserCapa$actions {
  private final parserCapa parser;

  /** Constructor */
  CUP$parserCapa$actions(parserCapa parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserCapa$do_action_part00000000(
    int                        CUP$parserCapa$act_num,
    java_cup.runtime.lr_parser CUP$parserCapa$parser,
    java.util.Stack            CUP$parserCapa$stack,
    int                        CUP$parserCapa$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserCapa$result;

      /* select the action based on the action number */
      switch (CUP$parserCapa$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ESTADO_INICIAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserCapa$stack.elementAt(CUP$parserCapa$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserCapa$stack.elementAt(CUP$parserCapa$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parserCapa$stack.elementAt(CUP$parserCapa$top-1)).value;
		RESULT = start_val;
              CUP$parserCapa$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserCapa$stack.elementAt(CUP$parserCapa$top-1)), ((java_cup.runtime.Symbol)CUP$parserCapa$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserCapa$parser.done_parsing();
          return CUP$parserCapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ESTADO_INICIAL ::= CAPA 
            {
              Object RESULT =null;

              CUP$parserCapa$result = parser.getSymbolFactory().newSymbol("ESTADO_INICIAL",0, ((java_cup.runtime.Symbol)CUP$parserCapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCapa$stack.peek()), RESULT);
            }
          return CUP$parserCapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ESTADO_INICIAL ::= USUARIO 
            {
              Object RESULT =null;

              CUP$parserCapa$result = parser.getSymbolFactory().newSymbol("ESTADO_INICIAL",0, ((java_cup.runtime.Symbol)CUP$parserCapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCapa$stack.peek()), RESULT);
            }
          return CUP$parserCapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CAPA ::= CAPAS CAPA 
            {
              Object RESULT =null;

              CUP$parserCapa$result = parser.getSymbolFactory().newSymbol("CAPA",1, ((java_cup.runtime.Symbol)CUP$parserCapa$stack.elementAt(CUP$parserCapa$top-1)), ((java_cup.runtime.Symbol)CUP$parserCapa$stack.peek()), RESULT);
            }
          return CUP$parserCapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CAPA ::= CAPAS 
            {
              Object RESULT =null;

              CUP$parserCapa$result = parser.getSymbolFactory().newSymbol("CAPA",1, ((java_cup.runtime.Symbol)CUP$parserCapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCapa$stack.peek()), RESULT);
            }
          return CUP$parserCapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CAPAS ::= ID_CAPA Llave_Abre VARIAS_CAPAS Llave_Cierra 
            {
              Object RESULT =null;
		  arrayObjetosC[ContCAP]=lstCapa; 
              CUP$parserCapa$result = parser.getSymbolFactory().newSymbol("CAPAS",2, ((java_cup.runtime.Symbol)CUP$parserCapa$stack.elementAt(CUP$parserCapa$top-3)), ((java_cup.runtime.Symbol)CUP$parserCapa$stack.peek()), RESULT);
            }
          return CUP$parserCapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VARIAS_CAPAS ::= AUX VARIAS_CAPAS 
            {
              Object RESULT =null;

              CUP$parserCapa$result = parser.getSymbolFactory().newSymbol("VARIAS_CAPAS",3, ((java_cup.runtime.Symbol)CUP$parserCapa$stack.elementAt(CUP$parserCapa$top-1)), ((java_cup.runtime.Symbol)CUP$parserCapa$stack.peek()), RESULT);
            }
          return CUP$parserCapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VARIAS_CAPAS ::= AUX 
            {
              Object RESULT =null;

              CUP$parserCapa$result = parser.getSymbolFactory().newSymbol("VARIAS_CAPAS",3, ((java_cup.runtime.Symbol)CUP$parserCapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCapa$stack.peek()), RESULT);
            }
          return CUP$parserCapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // AUX ::= Numeros Coma Numeros Coma Color Punto_Coma 
            {
              Object RESULT =null;
		int filaleft = ((java_cup.runtime.Symbol)CUP$parserCapa$stack.elementAt(CUP$parserCapa$top-5)).left;
		int filaright = ((java_cup.runtime.Symbol)CUP$parserCapa$stack.elementAt(CUP$parserCapa$top-5)).right;
		Object fila = (Object)((java_cup.runtime.Symbol) CUP$parserCapa$stack.elementAt(CUP$parserCapa$top-5)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$parserCapa$stack.elementAt(CUP$parserCapa$top-3)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parserCapa$stack.elementAt(CUP$parserCapa$top-3)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$parserCapa$stack.elementAt(CUP$parserCapa$top-3)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parserCapa$stack.elementAt(CUP$parserCapa$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parserCapa$stack.elementAt(CUP$parserCapa$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$parserCapa$stack.elementAt(CUP$parserCapa$top-1)).value;
		 lstCapa.insertarNodo(Integer.parseInt(fila.toString()),Integer.parseInt(col.toString()),color.toString()); 
              CUP$parserCapa$result = parser.getSymbolFactory().newSymbol("AUX",8, ((java_cup.runtime.Symbol)CUP$parserCapa$stack.elementAt(CUP$parserCapa$top-5)), ((java_cup.runtime.Symbol)CUP$parserCapa$stack.peek()), RESULT);
            }
          return CUP$parserCapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ID_CAPA ::= Numeros 
            {
              Object RESULT =null;
		int idCapaaleft = ((java_cup.runtime.Symbol)CUP$parserCapa$stack.peek()).left;
		int idCapaaright = ((java_cup.runtime.Symbol)CUP$parserCapa$stack.peek()).right;
		Object idCapaa = (Object)((java_cup.runtime.Symbol) CUP$parserCapa$stack.peek()).value;
		ContCAP++; lstCapa= new ListaCapaCD(); lstCapa.setIdCapa(Integer.parseInt(idCapaa.toString()));
              CUP$parserCapa$result = parser.getSymbolFactory().newSymbol("ID_CAPA",7, ((java_cup.runtime.Symbol)CUP$parserCapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCapa$stack.peek()), RESULT);
            }
          return CUP$parserCapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // USUARIO ::= BLOQUE_USUARIO USUARIO 
            {
              Object RESULT =null;

              CUP$parserCapa$result = parser.getSymbolFactory().newSymbol("USUARIO",4, ((java_cup.runtime.Symbol)CUP$parserCapa$stack.elementAt(CUP$parserCapa$top-1)), ((java_cup.runtime.Symbol)CUP$parserCapa$stack.peek()), RESULT);
            }
          return CUP$parserCapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // USUARIO ::= BLOQUE_USUARIO 
            {
              Object RESULT =null;

              CUP$parserCapa$result = parser.getSymbolFactory().newSymbol("USUARIO",4, ((java_cup.runtime.Symbol)CUP$parserCapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCapa$stack.peek()), RESULT);
            }
          return CUP$parserCapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BLOQUE_USUARIO ::= Usuario DosPuntos PARAMETRO_USUARIO Punto_Coma 
            {
              Object RESULT =null;

              CUP$parserCapa$result = parser.getSymbolFactory().newSymbol("BLOQUE_USUARIO",5, ((java_cup.runtime.Symbol)CUP$parserCapa$stack.elementAt(CUP$parserCapa$top-3)), ((java_cup.runtime.Symbol)CUP$parserCapa$stack.peek()), RESULT);
            }
          return CUP$parserCapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BLOQUE_USUARIO ::= Usuario DosPuntos Punto_Coma 
            {
              Object RESULT =null;

              CUP$parserCapa$result = parser.getSymbolFactory().newSymbol("BLOQUE_USUARIO",5, ((java_cup.runtime.Symbol)CUP$parserCapa$stack.elementAt(CUP$parserCapa$top-2)), ((java_cup.runtime.Symbol)CUP$parserCapa$stack.peek()), RESULT);
            }
          return CUP$parserCapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARAMETRO_USUARIO ::= Numeros Coma PARAMETRO_USUARIO 
            {
              Object RESULT =null;

              CUP$parserCapa$result = parser.getSymbolFactory().newSymbol("PARAMETRO_USUARIO",6, ((java_cup.runtime.Symbol)CUP$parserCapa$stack.elementAt(CUP$parserCapa$top-2)), ((java_cup.runtime.Symbol)CUP$parserCapa$stack.peek()), RESULT);
            }
          return CUP$parserCapa$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAMETRO_USUARIO ::= Numeros 
            {
              Object RESULT =null;

              CUP$parserCapa$result = parser.getSymbolFactory().newSymbol("PARAMETRO_USUARIO",6, ((java_cup.runtime.Symbol)CUP$parserCapa$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCapa$stack.peek()), RESULT);
            }
          return CUP$parserCapa$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserCapa$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserCapa$do_action(
    int                        CUP$parserCapa$act_num,
    java_cup.runtime.lr_parser CUP$parserCapa$parser,
    java.util.Stack            CUP$parserCapa$stack,
    int                        CUP$parserCapa$top)
    throws java.lang.Exception
    {
              return CUP$parserCapa$do_action_part00000000(
                               CUP$parserCapa$act_num,
                               CUP$parserCapa$parser,
                               CUP$parserCapa$stack,
                               CUP$parserCapa$top);
    }
}

}
